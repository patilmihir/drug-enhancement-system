/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.LocalPharmacyRole;

import Business.Drug.ApprovedDrugsDirectory;
import Business.Drug.Drugs;
import Business.DrugManufacturing.Organization.MassProductionOrganization;
import Business.DrugOrders.DrugItems;
import Business.DrugOrders.DrugOrders;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Hospital.Organization.LocalPharmacyOrganization;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PharmacyDrugRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.DrugTrialRole.ManageDrugTrial;

/**
 *
 * @author Pushkar
 */
public class ManagePharmacyInventory extends javax.swing.JPanel {

    /**
     * Creates new form ManagePharmacyInventory
     */
    JPanel userProcessContainer;
    UserAccount account;
    HospitalEnterprise hospitalEnterprise;
    LocalPharmacyOrganization localPharmacyOrganization;
    ApprovedDrugsDirectory approvedDrugsDirectory;
    DrugOrders drugOrder;
    Network network;

    public ManagePharmacyInventory(JPanel userProcessContainer, UserAccount account, HospitalEnterprise hospitalEnterprise, LocalPharmacyOrganization localPharmacyOrganization, ApprovedDrugsDirectory approvedDrugsDirectory, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.hospitalEnterprise = hospitalEnterprise;
        this.localPharmacyOrganization = localPharmacyOrganization;
        this.approvedDrugsDirectory = approvedDrugsDirectory;
        drugOrder = new DrugOrders();
        this.network = network;
        populateDrugTable();
        refreshOrderTable();
        drugOrder = new DrugOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblDrugs = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        txtNewQuantity = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        tblDrugs.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblDrugs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Drug Name", "Formula", "Price", "Avail"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDrugs);
        if (tblDrugs.getColumnModel().getColumnCount() > 0) {
            tblDrugs.getColumnModel().getColumn(0).setResizable(false);
            tblDrugs.getColumnModel().getColumn(1).setResizable(false);
            tblDrugs.getColumnModel().getColumn(2).setResizable(false);
            tblDrugs.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Drug Catalog");

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        addtoCartButton6.setText("ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Quantity:");

        jLabel7.setText("Item in cart");

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCart);

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnCheckOut.setText("Request");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(324, 324, 324)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(btnModifyQuantity)
                        .addGap(31, 31, 31)
                        .addComponent(btnCheckOut)
                        .addGap(19, 19, 19)
                        .addComponent(btnRemoveOrderItem))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(350, 350, 350)
                                .addComponent(jLabel5)
                                .addGap(12, 12, 12)
                                .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(addtoCartButton6))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel2)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addtoCartButton6))
                .addGap(17, 17, 17)
                .addComponent(jLabel7)
                .addGap(16, 16, 16)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNewQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModifyQuantity)
                    .addComponent(btnCheckOut)
                    .addComponent(btnRemoveOrderItem))
                .addGap(22, 22, 22)
                .addComponent(btnBack)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_btnBackActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDrugs.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table");
            return;
        }
        DrugItems selectedDrugs = (DrugItems) tblDrugs.getValueAt(selectedRow, 0);
        int fetchQty = (Integer) quantitySpinner.getValue();
        
        if (fetchQty <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity cannot be zero");
            return;
        }
        try {

            if (fetchQty <= selectedDrugs.getAvailableQuantity()) {
                boolean alreadyPresent = false;

                if (drugOrder.getDrugOrderList().isEmpty()) {
                    selectedDrugs.setRequestedQuantity(fetchQty);
                    drugOrder.getDrugOrderList().add(selectedDrugs);

                    for (DrugItems di : approvedDrugsDirectory.getApprovedDrugs()) {

                        if (di == selectedDrugs) {
                            int oldAvail = di.getAvailableQuantity();

                            int newQuantity = oldAvail - fetchQty;
                            di.setAvailableQuantity(newQuantity);
                            selectedDrugs.setAvailableQuantity(newQuantity);
                            populateDrugTable();
                            refreshOrderTable();
                            break;
                        }
                    }
                } else {
                    for (DrugItems di : drugOrder.getDrugOrderList()) {
                        if (di == selectedDrugs) {
                            int oldAvail = di.getAvailableQuantity();
                            int newQuantity = oldAvail - fetchQty;
                            di.setAvailableQuantity(newQuantity);
                            int reqQuantity = di.getRequestedQuantity();
                            di.setRequestedQuantity(fetchQty + reqQuantity);
                            //selectedDrugs.setAvailableQuantity(newQuantity);
                            alreadyPresent = true;
                            //drugOrder.getDrugOrderList().add(selectedDrugs);
                            populateDrugTable();
                            refreshOrderTable();
                            break;
                        }
                    }
                    if (!alreadyPresent) {
                        selectedDrugs.setRequestedQuantity(fetchQty);

                        for (DrugItems di : approvedDrugsDirectory.getApprovedDrugs()) {
                            if (di == selectedDrugs) {
                                selectedDrugs.setRequestedQuantity(fetchQty);
                            int oldAvail = di.getAvailableQuantity();
                            int newAvail = oldAvail - fetchQty;
                            di.setAvailableQuantity(newAvail);
                            selectedDrugs.setAvailableQuantity(newAvail);
                            drugOrder.getDrugOrderList().add(selectedDrugs);
                            populateDrugTable();
                            refreshOrderTable();
                            break;
                            }
                        }

                        
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Quantity greater than availability of product", "Warning", JOptionPane.WARNING_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid Sales Price");
            return;
        }
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCart.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table");
            return;
        }
        DrugItems selectedDrugitem = (DrugItems) tblCart.getValueAt(selectedRow, 0);
        int currentAvail = selectedDrugitem.getAvailableQuantity();

        int newQty = Integer.parseInt(txtNewQuantity.getText());
        if (newQty > currentAvail) {
            JOptionPane.showMessageDialog(null, "Quantity more than availability");
            return;
        } else {
            if (newQty <= 0) {
                JOptionPane.showMessageDialog(null, "Quantity should be greater than zero");
                return;
            }

            selectedDrugitem.setRequestedQuantity(newQty);

            for (DrugItems di : approvedDrugsDirectory.getApprovedDrugs()) {

                if (di == selectedDrugitem) {
                    di.setAvailableQuantity(currentAvail - newQty);
                    selectedDrugitem.setAvailableQuantity(currentAvail - newQty);
                    break;
                }
            }

            refreshOrderTable();
            populateDrugTable();
        }

    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int row = tblCart.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        DrugItems selectedDrugItem = (DrugItems) tblCart.getValueAt(row, 0);

        for (DrugItems di : approvedDrugsDirectory.getApprovedDrugs()) {
            if (di == selectedDrugItem) {
                int oldAvail = di.getAvailableQuantity();
                int oldQty = selectedDrugItem.getRequestedQuantity();
                int newAvailQty = oldAvail + oldQty;
                di.setAvailableQuantity(newAvailQty);
                drugOrder.getDrugOrderList().remove(selectedDrugItem);
                JOptionPane.showMessageDialog(null, "Order Item Removed from the cart");
            }
            refreshOrderTable();
            populateDrugTable();
        }
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        if (drugOrder.getDrugOrderList().size() > 0) {
            PharmacyDrugRequest pharmacyDrugRequest = new PharmacyDrugRequest();

            pharmacyDrugRequest.setSender(account);
            pharmacyDrugRequest.setStatus("Sent");
            pharmacyDrugRequest.setDrugOrder(drugOrder);

            Organization organization = null;
            for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {

                    if (org instanceof MassProductionOrganization) {
                        organization = org;
                        break;
                    }
                }
            }

            organization.getWorkQueue().getWorkRequestList().add(pharmacyDrugRequest);
            account.getWorkQueue().getWorkRequestList().add(pharmacyDrugRequest);
            drugOrder = new DrugOrders();
            JOptionPane.showMessageDialog(null, "Order placed successfully");
            int size = drugOrder.getDrugOrderList().size();
            for (int i = size - 1; i >= 0; i--) {
                drugOrder.getDrugOrderList().remove(i);
            }
            refreshOrderTable();
            populateDrugTable();

        } else {
            JOptionPane.showMessageDialog(null, "No order placed");

        }
    }//GEN-LAST:event_btnCheckOutActionPerformed

    public void populateDrugTable() {
        DefaultTableModel model = (DefaultTableModel) tblDrugs.getModel();
        model.setRowCount(0);

        for (DrugItems di : approvedDrugsDirectory.getApprovedDrugs()) {

            Object row[] = new Object[4];
            row[0] = di;
            row[1] = di.getDrug().getFormula();
            row[2] = di.getSellingPrice();
            row[3] = di.getAvailableQuantity();
            model.addRow(row);

        }
//        DrugItems di = new DrugItems();
//        Drugs drug = new Drugs();
//        drug.setName("drug1");
//        drug.setFormula("formula1");
//        di.setMrp(100);
//        di.setAvailableQuantity(50);
//        di.setDrug(drug);
//        approvedDrugsDirectory.getApprovedDrugs().add(di);
//        Object row[] = new Object[4];
//        row[0] = di;
//        row[1] = di.getDrug().getFormula();
//        row[2] = di.getSellingPrice();
//        row[3] = di.getAvailableQuantity();
//        model.addRow(row);
//
//        drug.setName("drug2");
//        drug.setFormula("formula2");
//        di.setMrp(200);
//        di.setAvailableQuantity(150);
//        di.setDrug(drug);
//        approvedDrugsDirectory.getApprovedDrugs().add(di);
//        row[0] = di;
//        row[1] = di.getDrug().getFormula();
//        row[2] = di.getSellingPrice();
//        row[3] = di.getAvailableQuantity();
//        model.addRow(row);
//
//        drug.setName("drug3");
//        drug.setFormula("formula3");
//        di.setMrp(300);
//        di.setAvailableQuantity(350);
//        di.setDrug(drug);
//        approvedDrugsDirectory.getApprovedDrugs().add(di);
//        row[0] = di;
//        row[1] = di.getDrug().getFormula();
//        row[2] = di.getSellingPrice();
//        row[3] = di.getAvailableQuantity();
//        model.addRow(row);
//
//        drug.setName("drug4");
//        drug.setFormula("formula5");
//        di.setMrp(400);
//        di.setAvailableQuantity(250);
//        di.setDrug(drug);
//        approvedDrugsDirectory.getApprovedDrugs().add(di);
//        row[0] = di;
//        row[1] = di.getDrug().getFormula();
//        row[2] = di.getSellingPrice();
//        row[3] = di.getAvailableQuantity();
//        model.addRow(row);
//
//        drug.setName("drug5");
//        drug.setFormula("formula5");
//        di.setMrp(500);
//        di.setAvailableQuantity(200);
//        di.setDrug(drug);
//        approvedDrugsDirectory.getApprovedDrugs().add(di);
//        row[0] = di;
//        row[1] = di.getDrug().getFormula();
//        row[2] = di.getSellingPrice();
//        row[3] = di.getAvailableQuantity();
//        model.addRow(row);

    }

    public void refreshOrderTable() {
        DefaultTableModel model = (DefaultTableModel) tblCart.getModel();

        model.setRowCount(0);
        for (DrugItems di : drugOrder.getDrugOrderList()) {

            Object row[] = new Object[4];
            row[0] = di;
            row[1] = di.getSellingPrice();
            row[2] = di.getRequestedQuantity();
            row[3] = di.getRequestedQuantity() * di.getSellingPrice();
            model.addRow(row);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblDrugs;
    private javax.swing.JTextField txtNewQuantity;
    // End of variables declaration//GEN-END:variables
}
