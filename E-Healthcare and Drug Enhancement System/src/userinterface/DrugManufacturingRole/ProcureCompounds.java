/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DrugManufacturingRole;

import Business.Drug.Compound;
import Business.Drug.MasterCompoundCatalog;
import Business.DrugManufacturing.Organization.CompoundSupplierOrganization;
import Business.DrugManufacturing.Organization.DrugManufacturingOrganization;
import Business.Enterprise.DrugManufacturingEnterprise;
import Business.Orders.CompoundOrder;
import Business.Orders.OrderItems;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ProcureCompoundWorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mihir
 */
public class ProcureCompounds extends javax.swing.JPanel {

    /**
     * Creates new form ProcureCompounds
     */
    JPanel userProcessContainer;
    DrugManufacturingOrganization drugManufacturingOrganization;
    DrugManufacturingEnterprise drugManufacturingEnterprise;
    MasterCompoundCatalog masterCompoundCatalog;
    CompoundOrder order;
    UserAccount account;
    boolean isCheckedOut = false;

    public ProcureCompounds(JPanel userProcessContainer, DrugManufacturingOrganization drugManufacturingOrganization, DrugManufacturingEnterprise drugManufacturingEnterprise, UserAccount account) {
        initComponents();
        this.account = account;
        this.userProcessContainer = userProcessContainer;
        this.drugManufacturingOrganization = drugManufacturingOrganization;
        this.drugManufacturingEnterprise= drugManufacturingEnterprise;
        this.masterCompoundCatalog= drugManufacturingEnterprise.getMasterCompoundCatalog();
        if (!isCheckedOut) {
            order = new CompoundOrder();
        }
        populateMasterTable();
    }

    private void populateMasterTable() {
        DefaultTableModel model = (DefaultTableModel) tblCompoundCatalog.getModel();
        model.setRowCount(0);
        for (Compound compound : masterCompoundCatalog.getCompoundList()) {
            Object row[] = new Object[3];
            row[0] = compound;
            row[1] = compound.getMolecularFormula();
            row[2] = compound.getQuantity();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCompoundCatalog = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        txtQuantity = new javax.swing.JSpinner();
        lblQuantity = new javax.swing.JLabel();
        btnSearchProduct = new javax.swing.JButton();
        lblCartItem = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        btnModifyQuantity = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnRequest = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        txtNewQuantity = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblCompoundCatalog.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblCompoundCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Formula", "Available Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCompoundCatalog.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblCompoundCatalog);
        if (tblCompoundCatalog.getColumnModel().getColumnCount() > 0) {
            tblCompoundCatalog.getColumnModel().getColumn(0).setResizable(false);
            tblCompoundCatalog.getColumnModel().getColumn(1).setResizable(false);
            tblCompoundCatalog.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 590, 100));

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(102, 102, 102));
        lblTitle.setText("Compund Catalog");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 30, 157, 30));

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 90, -1));

        btnAdd.setText("ADD TO CART");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 250, -1, -1));

        txtQuantity.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));
        add(txtQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 250, 40, -1));

        lblQuantity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblQuantity.setText("Quantity:");
        add(lblQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 250, -1, 20));

        btnSearchProduct.setText("Search Compound");
        btnSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchProductActionPerformed(evt);
            }
        });
        add(btnSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 70, -1, -1));

        lblCartItem.setText("Item in cart");
        add(lblCartItem, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 290, 92, 19));

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Formula", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrder.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblOrder);
        if (tblOrder.getColumnModel().getColumnCount() > 0) {
            tblOrder.getColumnModel().getColumn(0).setResizable(false);
        }

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 320, 588, 110));

        btnModifyQuantity.setText("Modify Quantity");
        btnModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyQuantityActionPerformed(evt);
            }
        });
        add(btnModifyQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 450, -1, -1));

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 450, 80, -1));

        btnRequest.setText("Request");
        btnRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestActionPerformed(evt);
            }
        });
        add(btnRequest, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 450, 100, -1));
        add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 70, 110, -1));
        add(txtNewQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 450, 70, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int selectedRow = tblCompoundCatalog.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table");
            return;
        }
        Compound selectedCompound = (Compound) tblCompoundCatalog.getValueAt(selectedRow, 0);
        try {
            int fetchQty = (Integer) txtQuantity.getValue();
            if (fetchQty <= 0) {
                JOptionPane.showMessageDialog(null, "Quantity cannot be zero");
                return;
            }

            if (fetchQty <= selectedCompound.getQuantity()) {
                boolean alreadyPresent = false;

                for (OrderItems oi : order.getOrder()) {
                    if (oi.getCompound() == selectedCompound) {

                        oi.setRequestedQuantity(fetchQty + oi.getRequestedQuantity());
                        alreadyPresent = true;
                        populateMasterTable();
                        populateOrderTable();
                        break;
                    }
                }
                if (!alreadyPresent) {
                    int oldAvail = selectedCompound.getQuantity();
                    int newAvail = oldAvail - fetchQty;
                    selectedCompound.setQuantity(newAvail);
                    order.addOrderItems(selectedCompound, fetchQty);
                    populateMasterTable();
                    populateOrderTable();
                }
            } else {
                JOptionPane.showMessageDialog(null, "Quantity greater than availability of compound", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Invalid Quantity");
            return;
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchProductActionPerformed

    }//GEN-LAST:event_btnSearchProductActionPerformed

    private void btnModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyQuantityActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblOrder.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table");
            return;
        }
        OrderItems oi = (OrderItems) tblOrder.getValueAt(selectedRow, 0);
        int currentAvail = oi.getCompound().getQuantity();
        int oldQty = oi.getRequestedQuantity();
        int newQty = Integer.parseInt(txtNewQuantity.getText());
        if (newQty > oldQty + currentAvail) {
            JOptionPane.showMessageDialog(null, "Quantity more than availability");
            return;
        } else {
            if (newQty <= 0) {
                JOptionPane.showMessageDialog(null, "Quantity should be greater than zero");
                return;
            }
            oi.setRequestedQuantity(newQty);
            oi.getCompound().setQuantity(currentAvail + (oldQty - newQty));
            populateMasterTable();
            populateOrderTable();
        }

    }//GEN-LAST:event_btnModifyQuantityActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int row = tblOrder.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        OrderItems oi = (OrderItems) tblOrder.getValueAt(row, 1);
        int oldAvail = oi.getCompound().getQuantity();
        int oldQty = oi.getRequestedQuantity();
        int newQty = oldAvail + oldQty;
        oi.setRequestedQuantity(newQty);
        order.getOrder().remove(oi);
        JOptionPane.showMessageDialog(null, "Order Item Removed from the cart");
        populateOrderTable();
        populateMasterTable();
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestActionPerformed
        // TODO add your handling code here:
        if (order.getOrder().size() > 0) {
            initiateRequest(order, account);
            JOptionPane.showMessageDialog(null, "Order placed successfully");
            order = new CompoundOrder();
            populateMasterTable();
            populateOrderTable();
            isCheckedOut = true;
        } else {
            JOptionPane.showMessageDialog(null, "No order placed");

        }

    }//GEN-LAST:event_btnRequestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnModifyQuantity;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnRequest;
    private javax.swing.JButton btnSearchProduct;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCartItem;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblCompoundCatalog;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTextField txtNewQuantity;
    private javax.swing.JSpinner txtQuantity;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    private void populateOrderTable() {
        DefaultTableModel model = (DefaultTableModel) tblOrder.getModel();

        model.setRowCount(0);
        for (OrderItems oi : order.getOrder()) {

            Object row[] = new Object[3];
            row[0] = oi;
            row[1] = oi.getCompound().getMolecularFormula();
            row[2] = oi.getRequestedQuantity();
            model.addRow(row);

        }
    }

    public void initiateRequest(CompoundOrder order, UserAccount userAccount) {
        ProcureCompoundWorkRequest procureCompoundWorkRequest = new ProcureCompoundWorkRequest();
        procureCompoundWorkRequest.setSender(userAccount);
        procureCompoundWorkRequest.setStatus("Sent");
        procureCompoundWorkRequest.setResult("Please approve the order.");
        procureCompoundWorkRequest.setCompoundOrder(order);

        Organization org = null;
        for (Organization organization : drugManufacturingEnterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof CompoundSupplierOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(procureCompoundWorkRequest);
            userAccount.getWorkQueue().getWorkRequestList().add(procureCompoundWorkRequest);
        }
    }
}
